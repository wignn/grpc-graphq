scalar Time

type Account {
  id: String!
  name: String!
  email: String!
  orders: [Order!]!
}


type Product {
  id: String!
  name: String!
  description: String!
  price: Float!
  image: String!
}

type Review {
  id: String!
  content: String
  rating: Int!
  Account: Account!
  Product: Product!
  createdAt: Time!
}

type Order {
  id: String!
  createdAt: Time!
  totalPrice: Float!
  products: [OrderedProduct!]!
  status: String!
}

type OrderedProduct {
  id: String!
  name: String!
  description: String!
  price: Float!
  quantity: Int!
}

input PaginationInput {
  skip: Int
  take: Int
}

input AccountInput {
  name: String!
  email: String!
  password: String!
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  image: String!
}

input ReviewInput {
  productId: String!
  accountId: String!
  content: String
  rating: Int!  
}

input OrderProductInput {
  id: String!
  quantity: Int!
}

input OrderInput {
  accountId: String!
  products: [OrderProductInput!]!
}

type DeleteProductResponse {
  deletedId: ID!
  success: Boolean!
  message: String
}

type Mutation {
  createAccount(account: AccountInput!): Account
  createProduct(product: ProductInput!): Product
  createReview(review: ReviewInput!): Review
  createOrder(order: OrderInput!): Order
  DeleteProduct(id: String!): DeleteProductResponse!
}

type Query {
  accounts(pagination: PaginationInput, id: String): [Account!]!
  products(pagination: PaginationInput, query: String, id: String): [Product!]!
  reviews(pagination: PaginationInput, id: String): [Review!]!
}